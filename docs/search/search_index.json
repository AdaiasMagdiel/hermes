{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hermes","text":"<p> <sub><sup>The image was generated using AI.</sup></sub> </p> <p> </p> <p>Hermes is an experimental lightweight PHP library for routing management. It provides a simple and intuitive way to define routes and execute actions based on HTTP requests.</p>"},{"location":"#navigation","title":"Navigation","text":"<ul> <li>Usage</li> <li>Reference</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Define routes easily using HTTP methods (GET, POST, PUT, DELETE, HEAD, OPTIONS and PATCH).</li> <li>Execute actions based on requested routes.</li> <li>Lightweight, experimental, and easy to integrate into existing projects.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can install Hermes via composer.</p> <pre><code>composer require adaiasmagdiel/hermes\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests for Hermes, you can use the following command:</p> <pre><code>composer run tests\n</code></pre>"},{"location":"#license","title":"License","text":"<p>Hermes is open-source software licensed under the MIT License. See the LICENSE file for more details.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>I welcome contributions to the Hermes project! To contribute, follow these steps:</p> <ul> <li> <p>Clone the repository to your local machine: <pre><code>git clone https://github.com/AdaiasMagdiel/hermes.git\n</code></pre></p> </li> <li> <p>Install the development dependencies using Composer: <pre><code>composer install\n</code></pre></p> </li> <li> <p>Make your changes or additions to the codebase.</p> </li> <li> <p>Write and test your changes to ensure they work as expected: <pre><code>composer run tests\n</code></pre></p> </li> <li> <p>Commit your changes and push them to your fork of the repository.</p> </li> <li> <p>Submit a pull request with a clear description of your changes.</p> </li> </ul> <p>I appreciate your contributions and feedback! If you encounter any issues or have suggestions for improvements, please don't hesitate to open an issue on GitHub.</p>"},{"location":"#credits","title":"Credits","text":"<p>Hermes is developed and maintained by Ada\u00edas Magdiel.</p>"},{"location":"reference/","title":"Reference","text":"<p>Here's a reference for the <code>Router</code> class:</p>"},{"location":"reference/#methods","title":"Methods","text":"<ul> <li> <p><code>initialize</code>: Required before defining the first route. Initializes the router by setting default error handling routes (404 and 500).</p> </li> <li> <p><code>route</code>: Registers a route with the specified HTTP method(s), route pattern, and associated action.</p> </li> <li> <p><code>get</code>: Registers a route for the HTTP GET method.</p> </li> <li> <p><code>post</code>: Registers a route for the HTTP POST method.</p> </li> <li> <p><code>put</code>: Registers a route for the HTTP PUT method.</p> </li> <li> <p><code>delete</code>: Registers a route for the HTTP DELETE method.</p> </li> <li> <p><code>head</code>: Registers a route for the HTTP HEAD method.</p> </li> <li> <p><code>options</code>: Registers a route for the HTTP OPTIONS method.</p> </li> <li> <p><code>patch</code>: Registers a route for the HTTP PATCH method.</p> </li> <li> <p><code>set404</code>: Sets a custom handler for the HTTP 404 Not Found error.</p> </li> <li> <p><code>set500</code>: Sets a custom handler for the HTTP 500 Internal Server Error.</p> </li> <li> <p><code>fallback</code>: Sets a fallback handler to catch all unmatched routes.</p> </li> <li> <p><code>redirect</code>: The <code>redirect</code> method in Hermes facilitates the definition of redirects from one route to another, allowing for easy navigation control within web applications.</p> </li> <li> <p><code>execute</code>: Required at the end of the routes declaration. Executes the router, matching the incoming request URI and method to registered routes and invoking associated actions.</p> </li> <li> <p><code>clean</code>: Resets the router, clearing all registered routes and reinitializing default error handling routes.</p> </li> </ul>"},{"location":"reference/#initialize","title":"<code>initialize()</code>","text":"<p>Initializes the router by setting default error handling routes (404 and 500). This method is required before call the first route.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n</code></pre>"},{"location":"reference/#routearraystring-method-string-route-callable-action-void","title":"<code>route(array|string $method, string $route, callable $action): void</code>","text":"<p>Registers a route with the specified HTTP method(s), route pattern, and associated action. The <code>route</code> method can receive two or more HTTP methods, and can evaluate the same action for these methods.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::route('GET', '/hello', function () {\n    echo \"Hello, World!\";\n});\n\nRoute::route(['GET', 'POST', 'PATCH'], '/world', function () {\n    echo \"See how this method can be used\";\n});\n</code></pre>"},{"location":"reference/#getstring-route-callable-action-void","title":"<code>get(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP GET method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::get('/hello', function () {\n    echo \"Hello, World!\";\n});\n</code></pre>"},{"location":"reference/#poststring-route-callable-action-void","title":"<code>post(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP POST method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::post('/submit', function () {\n    echo \"Form submitted successfully!\";\n});\n</code></pre>"},{"location":"reference/#putstring-route-callable-action-void","title":"<code>put(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP PUT method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::put('/update', function () {\n    echo \"Resource updated successfully!\";\n});\n</code></pre>"},{"location":"reference/#deletestring-route-callable-action-void","title":"<code>delete(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP DELETE method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::delete('/delete', function () {\n    echo \"Resource deleted successfully!\";\n});\n</code></pre>"},{"location":"reference/#headstring-route-callable-action-void","title":"<code>head(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP HEAD method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::head('/info', function () {\n    echo \"Information about the resource.\";\n});\n</code></pre>"},{"location":"reference/#optionsstring-route-callable-action-void","title":"<code>options(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP OPTIONS method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::options('/info', function () {\n    echo \"Options available for the resource.\";\n});\n</code></pre>"},{"location":"reference/#patchstring-route-callable-action-void","title":"<code>patch(string $route, callable $action): void</code>","text":"<p>Registers a route for the HTTP PATCH method.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::patch('/update', function () {\n    echo \"Resource partially updated successfully!\";\n});\n</code></pre>"},{"location":"reference/#set404callable-action-void","title":"<code>set404(callable $action): void</code>","text":"<p>Sets a custom handler for the HTTP 404 Not Found error.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::set404(function () {\n    echo \"404 Not Found: The requested page was not found.\";\n});\n</code></pre>"},{"location":"reference/#set500callable-action-void","title":"<code>set500(callable $action): void</code>","text":"<p>Sets a custom handler for the HTTP 500 Internal Server Error. This method receive the raised exception as argument.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::set500(function (\\Exception $e) {\n    echo \"500 Internal Server Error: There was a server-side issue.\";\n    var_dump($e);\n});\n</code></pre>"},{"location":"reference/#fallbackcallable-action-void","title":"<code>fallback(callable $action): void</code>","text":"<p>Sets a fallback handler to catch all unmatched routes.</p> <p>If this method is set, the <code>set404</code> method will have no effect. You can refer to the source code for a more complete understanding.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::fallback(function () {\n    echo \"Fallback: Route not found.\";\n});\n</code></pre>"},{"location":"reference/#redirectstring-from-string-to-bool-permanent-false-void","title":"<code>redirect(string $from, string $to, bool $permanent = false): void</code>","text":"<p>The <code>redirect</code> method enables the redirection of traffic from one route to another within the Hermes framework. It takes three arguments:</p> <ul> <li><code>$from</code> (string): Specifies the source route from which the redirection occurs.</li> <li><code>$to</code> (string): Specifies the destination route to which the traffic is redirected.</li> <li><code>$permanent</code> (bool, optional): Determines whether the redirection is permanent (true) or temporary (false). Default is set to false.</li> </ul> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\n// $permanent set to true (permanent redirect)\nRouter::redirect(\"/old-route\", \"/new-route\", true);\n\n// $permanent set to false (temporary redirect)\nRouter::redirect(\"/temporary-route\", \"/new-location\", false);\n</code></pre>"},{"location":"reference/#execute-void","title":"<code>execute(): void</code>","text":"<p>Executes the router, matching the incoming request URI and method to registered routes and invoking associated actions.</p> <p>This method is necessary at the end of your route definitions to invoke the current route.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::execute();\n</code></pre>"},{"location":"reference/#clean-void","title":"<code>clean(): void</code>","text":"<p>Resets the router, clearing all registered routes and reinitializing default error handling routes.</p> <pre><code>&lt;?php\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::clean();\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Here's a basic example of how to use Hermes:</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::get('/', function() {\n    echo \"Hello, World!\";\n});\n\nRouter::get('/about', function() {\n    echo \"About page\";\n});\n\nRouter::post('/submit', function() {\n    // Handle form submission\n});\n\nRouter::execute();\n</code></pre> <p>In this example, we define routes for different HTTP methods and execute actions based on the requested routes.</p> <p>First you need to initialize the <code>Router</code> class with the static <code>initialize</code> method. Then you can use the verbs methods to add routes.</p> <p>It's possible to define a route that executes for two or more HTTP methods using the static method <code>route</code> like this:</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::route(['GET', 'POST'], '/', function() {\n    echo \"This route will be triggered for both GET and POST requests.\";\n});\n\nRouter::execute();\n</code></pre>"},{"location":"usage/#custom-error-routes","title":"Custom Error Routes","text":"<p>You can customize the Not Found (404) and the Internal Server Error (500) route with the static <code>set404</code> and <code>set500</code> methods. The <code>set500</code> method receive the Exception object as argument, so you can handle it.</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\n// Optional changing the 404 page\nRouter::set404(function() {\n    http_response_code(404);\n    echo \"This is a new 404 page.\";\n});\n\n// Optional changing the 500 page\nRouter::set500(function(\\Exception $e) {\n    http_response_code(500);\n    echo \"This is a new 500 page.\";\n    var_dump($e);\n});\n\nRouter::execute();\n</code></pre>"},{"location":"usage/#dynamic-parameters-in-url","title":"Dynamic Parameters in URL","text":"<p>Hermes supports dynamic parameters in the URL, allowing you to create flexible routes that can handle various inputs. To define a dynamic parameter, use the syntax <code>/route/[param]</code>, where <code>[param]</code> is the name of the parameter.</p> <p>Here's how you can use dynamic parameters in Hermes:</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\n// Define a route with a dynamic parameter\nRouter::get('/user/[id]', function (string $id) {\n    echo \"User with ID: {$id}\";\n});\n\n// Another example with more params\nRouter::get('/blog/[category]/[slug]', function (string $category, string $slug) {\n    echo \"Blog post in {$category}/{$slug}\";\n});\n\n// Execute the router\nRouter::execute();\n</code></pre> <p>Dynamic parameters allow you to create more flexible and expressive routes, making it easier to handle different scenarios in your web application. </p>"},{"location":"usage/#fallback-route","title":"Fallback Route","text":"<p>If you want to get all extra routes in one place, you should use the <code>fallback</code> method. You have the flexibility to specify particular routes and employ <code>fallback</code> to catch any remaining ones, or you can solely depend on <code>fallback</code> to manage them comprehensively.</p> <p>Keep in mind: When you establish a fallback route, there's no need to use <code>set404</code> route separately; in fact, using <code>set404</code> has no effect when <code>fallback</code> is in play.</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::get('/', function () {\n    echo \"Home\";\n});\n\nRouter::get('/about', function () {\n    echo \"About\";\n});\n\nRouter::fallback(function () {\n    echo \"Getting all extra routes\";\n});\n\nRouter::execute();\n</code></pre> <p>Or just:</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::fallback(function () {\n    echo \"Getting all routes\";\n});\n\nRouter::execute();\n</code></pre>"},{"location":"usage/#redirects","title":"Redirects","text":"<p>In Hermes, it's possible to define redirects as well. For this, you will use the <code>redirect</code> method.</p> <p>This method requires three arguments: the 'from' route, the 'to' route, and whether it is a permanent (301) or temporary (302) redirect.</p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::get(\"/route\", function () {\n    echo \"Every request on / will be redirected to this route\";\n});\n\nRouter::redirect(\"/\", \"/route\");\n\nRouter::execute();\n</code></pre> <p>You can define whether the redirect is permanent by using the third argument in the redirect method and setting it to true. This will set the status code to 301. </p> <pre><code>&lt;?php\n\nrequire_once \"vendor/autoload.php\";\n\nuse AdaiasMagdiel\\Hermes\\Router;\n\nRouter::initialize();\n\nRouter::get(\"/new-route\", function () {\n    echo \"A new route\";\n});\n\nRouter::redirect(\"/old-route\", \"/new-route\", true);\n\nRouter::execute();\n</code></pre>"}]}